package com.sp.portal;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import shine.app.BrandManager;
import shine.dao.exception.ShineException;

import com.shine.boards.CorpBrand;
import com.sp.entity.UserEntity;
import com.sp.portal.brands.BrandResult;
import com.sp.security.Role;
import com.sp.security.StreetPinUserDetails;
import com.sp.user.UserDao;

@Controller
@RequestMapping(value = "/portal/brands")

public class PortalBrandController {

	@Autowired
	private BrandManager brandManager;
	
	@Autowired
	private UserDao userDao;

	@RequestMapping(value = "")
	@Secured({ Role.ADMIN, Role.USER })
	public String brands(	Model model, 
							Principal principal,
							@RequestParam(required = false, value = "start") Integer start)
									throws ShineException {
		
		Logger logger = LoggerFactory.getLogger(PortalBrandController.class);
	    logger.info("PortalBrandController - brands");

	    int count = 20;
		start = calculateStart(start);
		int totalBrands = 0;
		List<CorpBrand> brands = null;

		if (isAdmin(principal)) {
	    	brands = brandManager.getAllBrandsPaginated(start, count);
		} else {
		    int userId = getUserId(principal);
		    UserEntity userEntity = userDao.getUserById(userId);
		    Integer companyId = userEntity.getCorp_id();
		    if(companyId == null ) {
		    	brands = new ArrayList<CorpBrand>();
		    } else { 
		    	brands = brandManager.getBrandsForCompanyId(companyId);
		    }
		}

		BrandResult result = populateResult(brands, start, count, totalBrands);
		model.addAttribute("result", result);
		return "portal/portalbrands";
	}

	@RequestMapping(value = "/new")
	@Secured(Role.ADMIN)
	public String addBrand() throws ShineException {
		Logger logger = LoggerFactory.getLogger(PortalBrandController.class);
	    logger.info("PortalBrandController - addBrand");
		return "portal/portalbrandsnew";
	}

	// TODO: This should be refactored out ...
	private int getUserId(Principal principal) {
		StreetPinUserDetails user = (StreetPinUserDetails) ((Authentication) principal).getPrincipal();
		if (user == null) {
			return 0;
		}
		return user.getId();
	}
	
	// TODO: This should be refactored out ...
	private int calculateStart(Integer start) {
		if (start == null || start.intValue() < 1) {
			return 1;
		}
		return start;
	}

	// TODO: This should be refactored out ...
	private boolean isAdmin(Principal principal) {
		StreetPinUserDetails user = (StreetPinUserDetails) ((Authentication) principal).getPrincipal();
		return user.hasRole(Role.ADMIN);
	}

	private BrandResult populateResult(List<CorpBrand> brands, Integer start, Integer count, Integer totalBrands) {

		if (brands.isEmpty()) {
			return new BrandResult(brands, null, null, null);
		}

		Collections.sort(brands, new Comparator<CorpBrand>() {
			@Override
			public int compare(CorpBrand o1, CorpBrand o2) {
				return o1.getName().compareTo(o2.getName());
			}
		});

		BrandResult retResult = new BrandResult(brands, start, count, totalBrands);
		return retResult;
	}
}
