package com.sp.portal;

import java.security.Principal;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;

import shine.app.BoardManager;
import shine.app.BrandManager;
import shine.dao.exception.ShineException;

import com.shine.boards.CorpBrand;
import com.shine.boards.NoticeBoard;
import com.sp.security.Role;
import com.sp.security.StreetPinUserDetails;

@Controller
@RequestMapping(value = "/portal/brands")

public class PortalBrandController {

	@Autowired
	private BrandManager brandManager;

	@RequestMapping(value = "")
	@Secured(Role.ADMIN)
	public String brands(Model model, Principal principal) throws ShineException {
		Logger logger = LoggerFactory.getLogger(PortalBrandController.class);
	    logger.info("PortalBrandController - brands");
		int userId = getUserId(principal);
		List<CorpBrand> userBrands = brandManager.getBrandsForUserId(userId);

		Collections.sort(userBrands, new Comparator<CorpBrand>() {
			@Override
			public int compare(CorpBrand o1, CorpBrand o2) {
				return o1.getName().compareTo(o2.getName());
			}
		});

		model.addAttribute("userBrands", userBrands);

		return "portal/portalbrands";
	}

	@RequestMapping(value = "/new")
	@Secured(Role.ADMIN)
	public String addBrand() throws ShineException {
		Logger logger = LoggerFactory.getLogger(PortalBrandController.class);
	    logger.info("PortalBrandController - addBrand");
		return "portal/portalbrandsnew";
	}

	// TODO: This should be refactored out ...
	private int getUserId(Principal principal) {
		StreetPinUserDetails user = (StreetPinUserDetails) ((Authentication) principal).getPrincipal();
		if (user == null) {
			return 0;
		}
		return user.getId();
	}


}
