package com.sp.portal;

import java.security.Principal;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.access.annotation.Secured;
import org.springframework.security.core.Authentication;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import shine.app.AdManager;
import shine.app.BrandManager;
import shine.dao.exception.ShineException;

import com.shine.boards.Advert;
import com.shine.boards.CorpBrand;
import com.shine.boards.NoticeBoard;
import com.sp.admin.CompanyDao;
import com.sp.entity.UserEntity;
import com.sp.entity.admin.CompanyEntity;
import com.sp.portal.adverts.AdvertResult;
import com.sp.portal.boards.BoardResult;
import com.sp.portal.brands.BrandResult;
import com.sp.security.Role;
import com.sp.security.StreetPinUserDetails;
import com.sp.user.UserDao;

@Controller
@RequestMapping(value = "/portal")

public class PortalAdvertController {

	Logger logger = LoggerFactory.getLogger(PortalBrandController.class);
	
	@Autowired
	private AdManager adManager;

	@Autowired
	private BrandManager brandManager;

	@Autowired
	private UserDao userDao;
	
	@Autowired
	private CompanyDao companyDao;
	
	@RequestMapping(value = "/adverts")
	@Secured({ Role.ADMIN, Role.USER })
	public String adverts(	Model model, 
			Principal principal,
			@RequestParam(required = false, value = "start") Integer start)
					throws ShineException {
		
	    logger.info("PortalAdvertController - adverts");
	    
	    int count = 20;
		start = calculateStart(start);
		int totalBrands = 0;
		List<Advert> adverts = null;

		if (isAdmin(principal)) {
	    	adverts = adManager.getAllAdvertsPaginated(start, count);
		} else {
	    	adverts = adManager.getAllAdvertsPaginated(start, count);
		/*
		    int userId = getUserId(principal);
		    UserEntity userEntity = userDao.getUserById(userId);
		    Integer companyId = userEntity.getCorp_id();
		    if(companyId != null) {
		    	CompanyEntity company = companyDao.findById(companyId);
		    	adverts = adManager.getAdvertsByBrandIds(userEntity.getCorp_id());
		    	}
*/
		}

		AdvertResult result = populateResult(adverts, start, count, totalBrands);
		model.addAttribute("result", result);

		return "portal/portaladverts";
	}

	@RequestMapping(value = "/adverts/new")
	@Secured({ Role.ADMIN, Role.USER })
	public String addAdverts() throws ShineException {
	    logger.info("PortalAdvertController - adverts/new");
		return "portal/portaladvertsnew";
	}

	private int getUserId(Principal principal) {
		StreetPinUserDetails user = (StreetPinUserDetails) ((Authentication) principal).getPrincipal();
		if (user == null) {
			return 0;
		}
		return user.getId();
	}

	private boolean isAdmin(Principal principal) {
		StreetPinUserDetails user = (StreetPinUserDetails) ((Authentication) principal).getPrincipal();
		return user.hasRole(Role.ADMIN);
	}

	private int calculateStart(Integer start) {
		if (start == null || start.intValue() < 1) {
			return 1;
		}
		return start;
	}

	private AdvertResult populateResult(List<Advert> adverts, Integer start, Integer count, Integer totalAdverts) {

		if (adverts.isEmpty()) {
			return new AdvertResult(adverts, null, null, null);
		}

		Collections.sort(adverts, new Comparator<Advert>() {
			@Override
			public int compare(Advert o1, Advert o2) {
				return o1.getDisplayname().compareTo(o2.getDisplayname());
			}
		});

		return new AdvertResult(adverts, start, count, totalAdverts);
	}

}
